// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

package message

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"
import reflect "reflect"
import bytes "bytes"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Header_MessageEncoding int32

const (
    Header_PROTOCOL_BUFFER Header_MessageEncoding = 0
    Header_JSON            Header_MessageEncoding = 1
)

var Header_MessageEncoding_name = map[int32]string{
    0: "PROTOCOL_BUFFER",
    1: "JSON",
}
var Header_MessageEncoding_value = map[string]int32{
    "PROTOCOL_BUFFER": 0,
    "JSON":            1,
}

func (x Header_MessageEncoding) Enum() *Header_MessageEncoding {
    p := new(Header_MessageEncoding)
    *p = x
    return p
}
func (x Header_MessageEncoding) String() string {
    return proto.EnumName(Header_MessageEncoding_name, int32(x))
}
func (x Header_MessageEncoding) MarshalJSON() ([]byte, error) {
    return json.Marshal(x.String())
}
func (x *Header_MessageEncoding) UnmarshalJSON(data []byte) error {
    value, err := proto.UnmarshalJSONEnum(Header_MessageEncoding_value, data, "Header_MessageEncoding")
    if err != nil {
        return err
    }
    *x = Header_MessageEncoding(value)
    return nil
}

type Header struct {
    CreatedTime      *uint64                 `protobuf:"varint,1,req,name=created_time" json:"created_time,omitempty"`
    MessageLength    *uint32                 `protobuf:"varint,2,req,name=message_length" json:"message_length,omitempty"`
    MessageEncoding  *Header_MessageEncoding `protobuf:"varint,3,opt,name=message_encoding,enum=message.Header_MessageEncoding,def=0" json:"message_encoding,omitempty"`
    XXX_unrecognized []byte                  `json:"-"`
}

func (this *Header) Reset()         { *this = Header{} }
func (this *Header) String() string { return proto.CompactTextString(this) }
func (*Header) ProtoMessage()       {}

const Default_Header_MessageEncoding Header_MessageEncoding = Header_PROTOCOL_BUFFER

func (this *Header) GetCreatedTime() uint64 {
    if this != nil && this.CreatedTime != nil {
        return *this.CreatedTime
    }
    return 0
}

func (this *Header) GetMessageLength() uint32 {
    if this != nil && this.MessageLength != nil {
        return *this.MessageLength
    }
    return 0
}

func (this *Header) GetMessageEncoding() Header_MessageEncoding {
    if this != nil && this.MessageEncoding != nil {
        return *this.MessageEncoding
    }
    return Default_Header_MessageEncoding
}

type Field struct {
    Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
    Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
    XXX_unrecognized []byte  `json:"-"`
}

func (this *Field) Reset()         { *this = Field{} }
func (this *Field) String() string { return proto.CompactTextString(this) }
func (*Field) ProtoMessage()       {}

func (this *Field) GetName() string {
    if this != nil && this.Name != nil {
        return *this.Name
    }
    return ""
}

func (this *Field) GetValue() string {
    if this != nil && this.Value != nil {
        return *this.Value
    }
    return ""
}

type Message struct {
    Uuid             []byte   `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
    Timestamp        *int64   `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
    Type             *string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
    Logger           *string  `protobuf:"bytes,4,opt,name=logger" json:"logger,omitempty"`
    Severity         *int32   `protobuf:"varint,5,opt,name=severity" json:"severity,omitempty"`
    Payload          *string  `protobuf:"bytes,6,opt,name=payload" json:"payload,omitempty"`
    EnvVersion       *string  `protobuf:"bytes,7,opt,name=env_version" json:"env_version,omitempty"`
    Pid              *int32   `protobuf:"varint,8,opt,name=pid" json:"pid,omitempty"`
    Hostname         *string  `protobuf:"bytes,9,opt,name=hostname" json:"hostname,omitempty"`
    FieldArray       []*Field `protobuf:"bytes,10,rep,name=field_array" json:"field_array,omitempty"`
    XXX_unrecognized []byte   `json:"-"`

    Fields map[string]interface{}
}

func (this *Message) Reset()         { *this = Message{} }
func (this *Message) String() string { return proto.CompactTextString(this) }
func (*Message) ProtoMessage()       {}

func (this *Message) GetUuid() []byte {
    if this != nil {
        return this.Uuid
    }
    return nil
}

func (this *Message) GetTimestamp() int64 {
    if this != nil && this.Timestamp != nil {
        return *this.Timestamp
    }
    return 0
}

func (this *Message) GetType() string {
    if this != nil && this.Type != nil {
        return *this.Type
    }
    return ""
}

func (this *Message) GetLogger() string {
    if this != nil && this.Logger != nil {
        return *this.Logger
    }
    return ""
}

func (this *Message) GetSeverity() int32 {
    if this != nil && this.Severity != nil {
        return *this.Severity
    }
    return 0
}

func (this *Message) GetPayload() string {
    if this != nil && this.Payload != nil {
        return *this.Payload
    }
    return ""
}

func (this *Message) GetEnvVersion() string {
    if this != nil && this.EnvVersion != nil {
        return *this.EnvVersion
    }
    return ""
}

func (this *Message) GetPid() int32 {
    if this != nil && this.Pid != nil {
        return *this.Pid
    }
    return 0
}

func (this *Message) GetHostname() string {
    if this != nil && this.Hostname != nil {
        return *this.Hostname
    }
    return ""
}

func NewMessage() *Message {
    m := &Message{}
    m.Uuid = make([]byte, 16)
    m.Timestamp = new(int64)
    m.Type = new(string)
    m.Logger = new(string)
    m.Severity = new(int32)
    m.Payload = new(string)
    m.EnvVersion = new(string)
    m.Pid = new(int32)
    m.Hostname = new(string)
    return m
}

func init() {
    proto.RegisterEnum("message.Header_MessageEncoding", Header_MessageEncoding_name, Header_MessageEncoding_value)
}

// Copies a message to a newly initialized Message, including a deep
// copy of the Fields
func (self *Message) Copy(dst *Message) {
    copy(dst.Uuid, self.Uuid)
    if self.Timestamp != nil {
        *dst.Timestamp = *self.Timestamp
    } else {
        dst.Timestamp = nil
    }
    if self.Type != nil {
        *dst.Type = *self.Type
    } else {
        dst.Type = nil
    }
    if self.Logger != nil {
        *dst.Logger = *self.Logger
    } else {
        dst.Logger = nil
    }
    if self.Severity != nil {
        *dst.Severity = *self.Severity
    } else {
        dst.Severity = nil
    }
    if self.Payload != nil {
        *dst.Payload = *self.Payload
    } else {
        dst.Payload = nil
    }
    if self.EnvVersion != nil {
        *dst.EnvVersion = *self.EnvVersion
    } else {
        dst.EnvVersion = nil
    }
    if self.Pid != nil {
        *dst.Pid = *self.Pid
    } else {
        dst.Pid = nil
    }
    if self.Hostname != nil {
        *dst.Hostname = *self.Hostname
    } else {
        dst.Hostname = nil
    }
    dst.Fields = make(map[string]interface{})
    for k, v := range self.Fields {
        dst.Fields[k] = v
    }
    // ignore the field array and unrecognized data
}

// Test for message equality, for use in tests.
func (self *Message) Equals(other interface{}) bool {
    vSelf := reflect.ValueOf(self).Elem()
    vOther := reflect.ValueOf(other).Elem()

    var sField, oField reflect.Value
    var sMap, oMap map[string]interface{}
    for i := 0; i < vSelf.NumField(); i++ {
        sField = vSelf.Field(i)
        oField = vOther.Field(i)
        switch i {
        case 0: // uuid
            if !bytes.Equal(sField.Bytes(), oField.Bytes()) {
                return false
            }

        case 1, 2, 3, 4, 5, 6, 7, 8:
            if sField.Kind() == reflect.Ptr {
                s := reflect.Indirect(sField)
                o := reflect.Indirect(oField)
                if s.Interface() != o.Interface() {
                    return false
                }
            } else {
                if sField.Interface() != oField.Interface() {
                    return false
                }
            }

        case 9, 10: // FieldArray XXX_unrecognized
            // ignore

        case 11: // Fields
            sMap = sField.Interface().(map[string]interface{})
            oMap = oField.Interface().(map[string]interface{})
            if !reflect.DeepEqual(sMap, oMap) {
                return false
            }
        }
    }
    return true
}
